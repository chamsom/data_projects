install.packages(c("shiny", "shinydashboard", "DT", "plotly",
"dplyr", "ggplot2", "tidyr"))
source("C:/Users/jaeki/Documents/data_projects/clinical_trial_dashboard/data_generator.R")
shiny::runApp('ClinicalTrialDashboard')
getcwd()
# First, check if the data folder exists
dir.create("data", showWarnings = FALSE)
dir.create("data", showWarnings = FALSE)
set.seed(123)
n_patients <- 300
clinical_data <- data.frame(
patient_id = paste0("PT", sprintf("%04d", 1:n_patients)),
age = round(rnorm(n_patients, 65, 12)),
gender = sample(c("Male", "Female"), n_patients, replace = TRUE),
treatment_arm = sample(c("Treatment A", "Treatment B", "Placebo"),
n_patients, replace = TRUE, prob = c(0.4, 0.4, 0.2)),
site_id = sample(paste0("Site_", LETTERS[1:10]), n_patients, replace = TRUE),
enrollment_date = sample(seq(as.Date("2023-01-01"),
as.Date("2024-01-01"), by = "day"),
n_patients, replace = TRUE),
baseline_score = round(rnorm(n_patients, 50, 15)),
week_12_score = round(rnorm(n_patients, 45, 18)),
week_24_score = round(rnorm(n_patients, 40, 20)),
adverse_events = sample(0:3, n_patients, replace = TRUE, prob = c(0.6, 0.25, 0.1, 0.05)),
dropout = sample(c(TRUE, FALSE), n_patients, replace = TRUE, prob = c(0.15, 0.85)),
dropout_week = ifelse(runif(n_patients) < 0.15,
sample(1:24, n_patients, replace = TRUE), NA)
)
# Add treatment effect
clinical_data$week_12_score[clinical_data$treatment_arm == "Treatment A"] <-
clinical_data$week_12_score[clinical_data$treatment_arm == "Treatment A"] - 5
clinical_data$week_24_score[clinical_data$treatment_arm == "Treatment A"] <-
clinical_data$week_24_score[clinical_data$treatment_arm == "Treatment A"] - 8
# Save the data
write.csv(clinical_data, "data/sample_data.csv", row.names = FALSE)
print("Data created successfully!")
runApp('ClinicalTrialDashboard')
runApp('ClinicalTrialDashboard')
shiny::runApp('ClinicalTrialDashboard')
clear
cls()
clear()
install.packages(c("Survival", "survminer", "dplyr", "broom"))
# c() combines values into a vector
install.packages(c("survival", "survminer", "dplyr", "broom"))
data(lung)
# library() used to load packages, making functions available for use
# survival package contains core survival analysis routines, including definition of Surv objects, etc.
# dplyr package is a tool that allows for working with data frame like objects in-memory/out-memory
library(survival)
library(dplyr)
data(lung)
lung
clear
lung <- lung
# ALWAYS START WITH THESE TO EXPLORE
str(lung)
summary(lung)
colSums(is.na(lung))
head(lung)
library(survminer)
head(lung$time)
# how to create a survival object
# '$' used to create and access variables in lists and dataframes
head(lung$time)
head(lung$status)
# Surv() creates a survival object, in this case Surv(time, time2)
# time is for right censored data, or the follow up time, for interval data the first argument is the starting time for the interval
# time2 is the ending time of the interval, assumed to be open on the left and closed on the right (start, end]
surv_obj <- Surv(lung$time, lung$status)
surv_obj
# fit Kaplan-Meier curves, survfit() computes survival curves for censored data using the Kaplan-Meier method
# estimates probability of survival over time based on survival data
# survfit(formula, data) requires Surv object (surv_object) as the response on the left of the '~' operator
# the right hand side of the tilde is the independent variable, in this case sex
fit <- survfit(surv_obj ~ sex, data = lung)
ggsurvplot(fit,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
legends.labs = c("Male", "Female"))
ggsurvplot(fit,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
legend.labs = c("Male", "Female"))
summary(fit)
# ph.ecog is the ECOG performance score as rated by the physician
# 0 = asymptomatic, 1 = symptomatic but completely ambulatory, 2 = in bed < 50% of the day, 3 = in bed > 50% of the day but not bedbound, 4 = bedbound
surv_bed_obj <- Surv(lung$time, lung$ph.ecog)
surv_bed_obj
# use survfit() to compute survival curves for censored data/estimate probability of survival over time
# surv_bed_obj is the response whereas sex is the independent variable
bed_fit <- survfit(surv_bed_obj ~ time, data = lung)
ggsurvplot(bed_fit,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
legend.labs = c("Male", "Female"))
# ph.ecog is the ECOG performance score as rated by the physician
# 0 = asymptomatic, 1 = symptomatic but completely ambulatory, 2 = in bed < 50% of the day, 3 = in bed > 50% of the day but not bedbound, 4 = bedbound
lung$ph.ecog
# use survfit() to compute survival curves for censored data/estimate probability of survival over time
# surv_bed_obj is the response whereas sex is the independent variable
bed_fit <- survfit(surv_bed_obj ~ sex, data = lung)
ggsurvplot(bed_fit,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
legend.labs = c("Male", "Female"))
summary(bed_fit)
ggsurvplot(bed_fit,
title = "Probability Until Becoming Bedbound",
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
legend.labs = c("Male", "Female"))
ggsurvplot(bed_fit,
title = "Probability Until Becoming Bedbound",
pval = TRUE,
# conf.int = TRUE,
risk.table = TRUE,
legend.labs = c("Male", "Female"))
summary(one_year_fit)
# estimating x-year survival: estimate the probability of surviving to 1 year
one_year_fit <- survfit(suv_obj ~ sex, data = lung, time = 365)
# estimating x-year survival: estimate the probability of surviving to 1 year
one_year_fit <- survfit(suv_obj ~ sex, data = lung, times = 365)
# estimating x-year survival: estimate the probability of surviving to 1 year
one_year_fit <- survfit(surv_obj ~ sex, data = lung, times = 365)
# estimating x-year survival: estimate the probability of surviving to 1 year
one_year_fit <- survfit(Surv(lung$time, lung$status), times = 365)
# estimating x-year survival: estimate the probability of surviving to 1 year
one_year_fit <- survfit(Surv(lung$time, lung$status ~ 1, data = lung), times = 365)
# estimating x-year survival: estimate the probability of surviving to 1 year
summary(survfit(Surv(time, status) ~ 1, data = lung), times = 365.25)
# estimating x-year survival: estimate the probability of surviving to 1 year
one_year_fit <- survfit(Surv(time, status ~ 1, data = lung), times = 365)
# estimating x-year survival: estimate the probability of surviving to 1 year
# ~ 1 estimate survival probabiltiies for the entire data set as a single group
one_year_fit <- summary(survfit(Surv(time, status) ~ 1, data = lung), times = 365)
one_year_fit
ggsurvplot(one_year_fit,
pval = TRUE,
conf.int = TRUE,
risk.table = TRUE,
legend.labs = c("Male", "Female"))
one_year_fit
# using survdiff()/log-rank test to see whether there was a difference in survival time according to sex
survdiff(Surv(time, status) ~ sex, data = lung)
# Cox Proportional Hazards Model shows impact of predictors (age, gender, treatment type, etc.) influence risk of event occurring
# accommodates censored data: individuals do not experience event by end of study or drop out
# in this case, cox_model's predictor variables/covariates are age + sex + ph.ecog
cox_model <- coxph(Surv(time, status) ~ age + sex + ph.ecog, data = lung)
summary(cox_model)
# broom packages takes messy output and turns them into tidy tibbles via three S3 methods: tidy, augment, glance
library(broom)
# broom packages takes messy output and turns them into tidy tibbles via three S3 methods: tidy, augment, glance
# library(broom) line is not necessary as package 'broom' was built under R version 4.4.3
# tidy constructs tibble that summarizes model's statistical findings
# exponentiate = TRUE returns the hazard ratio rather than the log hazard ratio
hr_results <- tidy(cox_model, exponentiate = TRUE, conf.int = TRUE)
print(hr_results)
# model performance
concordance(cox_model)
